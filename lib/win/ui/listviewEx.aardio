//listview 扩展
import win.ui.ctrl.edit;
import win.ui.ctrl.combobox;
namespace win.ui;
class listviewEx{
	ctor( listview ){
		this = listview; 
		this.fullRow = 1;
		this.gridLines = 1;
		this.columnsEditbox = {};//记录编辑框列号
		this.columnsCombobox = {};//记录下拉框列号和列表值
		//添加下拉框模板
		this.addCtrl(
            combobox = { 
                cls="combobox";font = LOGFONT( h = -19 );left = 0;top = 0;
                right = 50;bottom = 50;autoResize = false ;hide = 1;edge = 1;mode="dropdownlist";
                wndproc = function( hwnd, message, wParam, lParam ){
                    var update;
                    var event = owner.event;

                    if( message == 308 ) {
                        update = true;
                    }
                    if( update ){
                    	owner.show(false);
                        var t = this.getItemText(event.iItem,event.iSubItem );
                        if( t!= owner.text ){
                        	if( this.onEditChanged ) {
	                        		if( false === this.onEditChanged(owner.text, event.iItem, event.iSubItem)) 
	                        			return;
                        	}
                        		
                        	this.setItemText( owner.text, event.iItem, event.iSubItem );
                        }
                        
                        if(this.onEditEnd){
                        	this.onEditEnd(event.iItem, event.iSubItem);
                        }
                    }
                }  
            }
         );
        //添加编辑框模板
 		this.addCtrl(
            editBox = { 
                cls="edit";font = LOGFONT( h = -19 );left = 0;top = 0;
                right = 50;bottom = 50;autoResize = false ;hide = 1;edge = 1;
                wndproc = function( hwnd, message, wParam, lParam ){
                    var update;
                    var event = owner.event;

                    if( ( message = 0x8/*_WM_KILLFOCUS*/)  || (message == 0x101/*_WM_KEYUP*/ && wParam == 0xD/*_VK_RETURN*/ ) ) {
                        update = true;
                    }
                    elseif(message == 0x201/*_WM_LBUTTONDOWN*/ ){
                        var x,y = ..win.getMessagePos(lParam)
                        var rc = this.editBox.getClientRect();
                       
                        if( ! ::PtInRect(rc,x,y) ) update = true;
                        this.editBox.capture = !update;
                    } 
                    elseif(message == 0x101/*_WM_KEYUP*/){
                    	if( wParam == 0xD/*_VK_RETURN*/ ) update = true;
                    	elseif( wParam == 0x1B/*_VK_ESC*/){
                    		owner.text = this.getItemText(event.iItem,event.iSubItem );
                    		update = true;
                    	}
                    }
                    if( update ){
                    	owner.show(false);
                        var t = this.getItemText(event.iItem,event.iSubItem );
                        if( t!= owner.text ){
                        	if( this.onEditChanged ) {
	                        		if( false === this.onEditChanged(owner.text, event.iItem, event.iSubItem)) 
	                        			return;
                        	}
                        		
                        	this.setItemText( owner.text, event.iItem, event.iSubItem );
                        }
                        
                        if(this.onEditEnd){
                        	this.onEditEnd(event.iItem, event.iSubItem);
                        }
                    }
                }  
            }
        )
	};
	//绘制下拉框
	beginCombobox = function(iItem,iSubItem){
		var combobox = this.combobox;
		if( ..win.isVisible(combobox.hwnd) ) return; 
		
		var event = this.combobox.event;
		if(iItem===null && iSubItem===null) {
			iItem = event.iItem;
			iSubItem = event.iSubItem;
		}
		else {
			event = {
				iItem = iItem;
				iSubItem = iSubItem;
			};
			combobox.event = event;
		} 
		
       	combobox.items = this.columnsCombobox[iSubItem];
        combobox.selText=this.getItemText(iItem,iSubItem);
        var rc=this.getItemRect(iItem,iSubItem,,2/*_LVIR_LABEL*/ );
        
        rc.inflate(2,2);
        combobox.setRect(rc);
        combobox.showDropDown();
        return true;	
	};
	//绘制编辑框
	beginEdit = function(iItem,iSubItem){
		var edit = this.editBox;
		if( ..win.isVisible(edit.hwnd) ) return; 
		
		var event = this.editBox.event;
		if(iItem===null && iSubItem===null) {
			iItem = event.iItem;
			iSubItem = event.iSubItem;
		}
		else {
			event = {
				iItem = iItem;
				iSubItem = iSubItem;
			};
			edit.event = event;
		} 

        edit.text=this.getItemText(iItem,iSubItem);
        var rc=this.getItemRect(iItem,iSubItem,,2/*_LVIR_LABEL*/ );
        
        rc.inflate(2,2);
        edit.setRect(rc);
        edit.show(); 
        edit.setFocus();
        edit.capture = true;
        return true;	
	};
	//设置下拉框模式 列号/下拉值
	setcolumnsCombobox = function(iSubItem,tab,...){
		var c = type(tab) === "table" ? tab : {tab,...}
		this.columnsCombobox[iSubItem] = c;
	};
	//设置编辑框模式 列号
	setcolumnsEditbox = function(...){
		var c = type(...) === "table" ? ... : {...}
		for(i,idx in c) this.columnsEditbox[idx] = 1;
	};
	prenotify = { 
		[0xFFFFFFFD/*_NM_DBLCLK*/] = function(id,code,ptr){
			var event = this.getNotifyMessage(code,ptr);
        	if( ! event.iItem && event.iSubItem ) return ;
			//启用 编辑框
       		if( this.columnsEditbox[event.iSubItem] ){
       			this.editBox.event = event; 
        		this.beginEdit();
       		};
       		//启用 下拉框
       		if( this.columnsCombobox[event.iSubItem] ){
       			this.combobox.event = event; 
        		this.beginCombobox();
       		};
		};
	} 
}


/**intellisense()
win.ui.listviewEx(__) = 参数必须指定一个listview控件对象\n返回一个可编辑单元格的列表视图对象,\n\n鼠标左键单击单元格、或者按空格键开始编辑,\n回车完成编辑,ESC键撤消编辑,回车+上下方向键快速移动到其他项,\n用户完成编辑后会触发onEditChanged事件.\n!listview.
win.ui.listviewEx() = !win_ui_listviewEx.
!win_ui_listviewEx.edit = 实现编辑功能的edit控件\n此功能需要扩展listview并实现了编辑功能的的控件才能支持\n!edit.
!win_ui_listviewEx.combobox = 实现编辑功能的edit控件\n此功能需要扩展listview并实现了编辑功能的的控件才能支持\n!combobox.
!win_ui_listviewEx.onEditChanged(text,iItem,iSubItem) = @.onEditChanged = function(text,iItem,iSubItem){
	__/*控件完成编辑,并且文本已变更,\ntext为改变后的文本,iItem为行号,iSubItem为列号\n此功能需要扩展listview并实现了编辑功能的的控件才能支持\n返回false可中止更新显示文本*/
}
!win_ui_listviewEx.onEditEnd(iItem,iSubItem) = @.onEditEnd = function(iItem,iSubItem){
	__/*控件完成编辑*/
}
!win_ui_listviewEx.setTable(__) = 用listview控件显示数据表\n此函数会自动清空控件之前的所有项,\n如果没有创建任何列,则自动创建列\n\n数据表应当包含行组成的数组,\n每行的数据列必须是由列名和列值组成的键值对\n数据表应使用fields包含需要显示的列名称数组\n可以通过fields控制要显的列、以及要显示的顺序\n\n使用sqlite,access,sqlServer等数据库对象提供的getTable函数可获取符合此规格的数据表 
!win_ui_listviewEx.setColumns(__) = 用一个字符串数组指定要显示的列\n如果参数为空则清空所有列
!win_ui_listviewEx.setcolumnsCombobox(__) = 可以使用一个或多个参数指定要禁止编辑的列序号,\n也可以用一个数组参数指定多个列序号
!win_ui_listviewEx.setcolumnsEditbox(__) = 可以使用一个或多个参数指定要编辑的列序号,\n也可以用一个数组参数指定多个列序号
!win_ui_listviewEx.clear() = 清空所有行
!win_ui_listviewEx.clear(true) = 清空所有行,并且清空所有列
end intellisense**/
